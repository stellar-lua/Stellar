"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[639],{65200:e=>{e.exports=JSON.parse('{"functions":[{"name":"ObserveSignal","desc":"Observes a RemoteEvent","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"func","desc":"","lua_type":"(player: Player, ...any) -> ()"}],"returns":[{"desc":"","lua_type":"RBXScriptConnection\\n"}],"function_type":"method","source":{"line":44,"path":"src/Core/Shared/Utilities/Network.lua"}},{"name":"Signal","desc":"Signals the server if run on the client, and vice versa\\nThe second argument must be the player to signal if being run on the server","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":60,"path":"src/Core/Shared/Utilities/Network.lua"}},{"name":"SignalAll","desc":"Signals all clients","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":73,"path":"src/Core/Shared/Utilities/Network.lua"}},{"name":"SignalAsync","desc":"Signals and yields for response","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":82,"path":"src/Core/Shared/Utilities/Network.lua"}},{"name":"Invoke","desc":"Invokes the server","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"any\\n"}],"function_type":"method","realm":["Client"],"source":{"line":88,"path":"src/Core/Shared/Utilities/Network.lua"}},{"name":"InvokePromise","desc":"Invokes the server with a promise","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"any\\n"}],"function_type":"method","realm":["Client"],"source":{"line":123,"path":"src/Core/Shared/Utilities/Network.lua"}},{"name":"OnInvoke","desc":"Sets the function for handling invoke requests","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"func","desc":"","lua_type":"(player: Player, ...any) -> ()"}],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":139,"path":"src/Core/Shared/Utilities/Network.lua"}},{"name":"Reserve","desc":"Used to reserve remotes on the server.\\nWhen remotes arent used or listened to on the server, they cannot be created.\\nBy reserving them, they are created so the client can connect to them.\\n\\nExample Usage:\\n```lua\\nNetwork:Reserve(\\n    {\\"ExampleFunction\\", \\"RemoteFunction\\"},\\n    {\\"ExampleEvent\\", \\"RemoteEvent\\"}\\n)\\n```","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","realm":["Server"],"source":{"line":161,"path":"src/Core/Shared/Utilities/Network.lua"}},{"name":"GetEndpoint","desc":"Used internally for getting remotes.\\nYou should use this too if you need to use the physical remote as they are named GUIDs after first found on client.\\nThis practice, whilst not completely solving remote tampering, will make it slightly harder.","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"remote","desc":"","lua_type":"Endpoint"}],"returns":[{"desc":"","lua_type":"Remote\\n"}],"function_type":"method","source":{"line":174,"path":"src/Core/Shared/Utilities/Network.lua"}}],"properties":[],"types":[],"name":"Network","desc":"Handles the creation of RemoteEvents and RemoteFunctions.\\n\\n:::caution\\nIf the client attempts to connect to an endpoint which has not yet been referenced on the server, it will yield for 10 seconds and then drop the request.\\nIf the server does not reference the endpoint when the server starts, you must \\"Reserve\\" it on startup.\\n:::\\n\\nExample Usage:\\n```lua\\n-- Server\\nlocal Network = Stellar.Get(\\"Network\\")\\n\\nNetwork:OnInvoke(\\"ExampleFunction\\", function(player: Player, message: string)\\n    local serverResponse: string = `Hello, {player.Name}! You said: {message}!`\\n\\n    return serverResponse\\nend)\\n\\n-- Client\\nlocal Network = Stellar.Get(\\"Network\\")\\n\\nlocal response: string = Network:Invoke(\\"ExampleFunction\\", \\"Hello server!\\")\\nprint(response)\\n```","source":{"line":28,"path":"src/Core/Shared/Utilities/Network.lua"}}')}}]);